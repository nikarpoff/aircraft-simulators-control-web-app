/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.server.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ComponentState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 995772172934963052L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ComponentState\",\"namespace\":\"org.server.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"responseTime\",\"type\":\"int\"},{\"name\":\"temperature\",\"type\":\"int\"},{\"name\":\"power\",\"type\":\"int\"},{\"name\":\"voltage\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ComponentState> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ComponentState> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ComponentState> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ComponentState> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ComponentState> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ComponentState to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ComponentState from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ComponentState instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ComponentState fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private int responseTime;
  private int temperature;
  private int power;
  private int voltage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ComponentState() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param responseTime The new value for responseTime
   * @param temperature The new value for temperature
   * @param power The new value for power
   * @param voltage The new value for voltage
   */
  public ComponentState(java.lang.String id, java.lang.Integer responseTime, java.lang.Integer temperature, java.lang.Integer power, java.lang.Integer voltage) {
    this.id = id;
    this.responseTime = responseTime;
    this.temperature = temperature;
    this.power = power;
    this.voltage = voltage;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return responseTime;
    case 2: return temperature;
    case 3: return power;
    case 4: return voltage;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: responseTime = (java.lang.Integer)value$; break;
    case 2: temperature = (java.lang.Integer)value$; break;
    case 3: power = (java.lang.Integer)value$; break;
    case 4: voltage = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'responseTime' field.
   * @return The value of the 'responseTime' field.
   */
  public int getResponseTime() {
    return responseTime;
  }


  /**
   * Sets the value of the 'responseTime' field.
   * @param value the value to set.
   */
  public void setResponseTime(int value) {
    this.responseTime = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public int getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(int value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'power' field.
   * @return The value of the 'power' field.
   */
  public int getPower() {
    return power;
  }


  /**
   * Sets the value of the 'power' field.
   * @param value the value to set.
   */
  public void setPower(int value) {
    this.power = value;
  }

  /**
   * Gets the value of the 'voltage' field.
   * @return The value of the 'voltage' field.
   */
  public int getVoltage() {
    return voltage;
  }


  /**
   * Sets the value of the 'voltage' field.
   * @param value the value to set.
   */
  public void setVoltage(int value) {
    this.voltage = value;
  }

  /**
   * Creates a new ComponentState RecordBuilder.
   * @return A new ComponentState RecordBuilder
   */
  public static org.server.avro.model.ComponentState.Builder newBuilder() {
    return new org.server.avro.model.ComponentState.Builder();
  }

  /**
   * Creates a new ComponentState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ComponentState RecordBuilder
   */
  public static org.server.avro.model.ComponentState.Builder newBuilder(org.server.avro.model.ComponentState.Builder other) {
    if (other == null) {
      return new org.server.avro.model.ComponentState.Builder();
    } else {
      return new org.server.avro.model.ComponentState.Builder(other);
    }
  }

  /**
   * Creates a new ComponentState RecordBuilder by copying an existing ComponentState instance.
   * @param other The existing instance to copy.
   * @return A new ComponentState RecordBuilder
   */
  public static org.server.avro.model.ComponentState.Builder newBuilder(org.server.avro.model.ComponentState other) {
    if (other == null) {
      return new org.server.avro.model.ComponentState.Builder();
    } else {
      return new org.server.avro.model.ComponentState.Builder(other);
    }
  }

  /**
   * RecordBuilder for ComponentState instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ComponentState>
    implements org.apache.avro.data.RecordBuilder<ComponentState> {

    private java.lang.String id;
    private int responseTime;
    private int temperature;
    private int power;
    private int voltage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.server.avro.model.ComponentState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.responseTime)) {
        this.responseTime = data().deepCopy(fields()[1].schema(), other.responseTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.power)) {
        this.power = data().deepCopy(fields()[3].schema(), other.power);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.voltage)) {
        this.voltage = data().deepCopy(fields()[4].schema(), other.voltage);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ComponentState instance
     * @param other The existing instance to copy.
     */
    private Builder(org.server.avro.model.ComponentState other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.responseTime)) {
        this.responseTime = data().deepCopy(fields()[1].schema(), other.responseTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.power)) {
        this.power = data().deepCopy(fields()[3].schema(), other.power);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.voltage)) {
        this.voltage = data().deepCopy(fields()[4].schema(), other.voltage);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'responseTime' field.
      * @return The value.
      */
    public int getResponseTime() {
      return responseTime;
    }


    /**
      * Sets the value of the 'responseTime' field.
      * @param value The value of 'responseTime'.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder setResponseTime(int value) {
      validate(fields()[1], value);
      this.responseTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'responseTime' field has been set.
      * @return True if the 'responseTime' field has been set, false otherwise.
      */
    public boolean hasResponseTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'responseTime' field.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder clearResponseTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public int getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder setTemperature(int value) {
      validate(fields()[2], value);
      this.temperature = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder clearTemperature() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'power' field.
      * @return The value.
      */
    public int getPower() {
      return power;
    }


    /**
      * Sets the value of the 'power' field.
      * @param value The value of 'power'.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder setPower(int value) {
      validate(fields()[3], value);
      this.power = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'power' field has been set.
      * @return True if the 'power' field has been set, false otherwise.
      */
    public boolean hasPower() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'power' field.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder clearPower() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'voltage' field.
      * @return The value.
      */
    public int getVoltage() {
      return voltage;
    }


    /**
      * Sets the value of the 'voltage' field.
      * @param value The value of 'voltage'.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder setVoltage(int value) {
      validate(fields()[4], value);
      this.voltage = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'voltage' field has been set.
      * @return True if the 'voltage' field has been set, false otherwise.
      */
    public boolean hasVoltage() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'voltage' field.
      * @return This builder.
      */
    public org.server.avro.model.ComponentState.Builder clearVoltage() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ComponentState build() {
      try {
        ComponentState record = new ComponentState();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.responseTime = fieldSetFlags()[1] ? this.responseTime : (java.lang.Integer) defaultValue(fields()[1]);
        record.temperature = fieldSetFlags()[2] ? this.temperature : (java.lang.Integer) defaultValue(fields()[2]);
        record.power = fieldSetFlags()[3] ? this.power : (java.lang.Integer) defaultValue(fields()[3]);
        record.voltage = fieldSetFlags()[4] ? this.voltage : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ComponentState>
    WRITER$ = (org.apache.avro.io.DatumWriter<ComponentState>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ComponentState>
    READER$ = (org.apache.avro.io.DatumReader<ComponentState>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeInt(this.responseTime);

    out.writeInt(this.temperature);

    out.writeInt(this.power);

    out.writeInt(this.voltage);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.responseTime = in.readInt();

      this.temperature = in.readInt();

      this.power = in.readInt();

      this.voltage = in.readInt();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.responseTime = in.readInt();
          break;

        case 2:
          this.temperature = in.readInt();
          break;

        case 3:
          this.power = in.readInt();
          break;

        case 4:
          this.voltage = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










